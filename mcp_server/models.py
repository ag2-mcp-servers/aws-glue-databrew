# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:27:55+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, confloat, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccountId(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class ActionId(RootModel[int]):
    root: int


class AnalyticsMode(Enum):
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'


class Arn(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class AssumeControl(RootModel[bool]):
    root: bool


class Attempt(RootModel[int]):
    root: int


class Bucket(RootModel[constr(min_length=3, max_length=63)]):
    root: constr(min_length=3, max_length=63)


class BucketOwner(
    RootModel[constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12)]
):
    root: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12)


class CatalogId(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class ClientSessionId(RootModel[SecretStr]):
    root: SecretStr


class ColumnName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class ColumnNameList(RootModel[List[ColumnName]]):
    root: List[ColumnName] = Field(..., max_length=200)


class ColumnRange(RootModel[conint(ge=0, le=20)]):
    root: conint(ge=0, le=20)


class ColumnSelector(BaseModel):
    Name: Optional[ColumnName] = None
    Regex: Optional[ColumnName] = None


class ColumnSelectorList(RootModel[List[ColumnSelector]]):
    root: List[ColumnSelector] = Field(..., min_length=1)


class CompressionFormat(Enum):
    GZIP = 'GZIP'
    LZ4 = 'LZ4'
    SNAPPY = 'SNAPPY'
    BZIP2 = 'BZIP2'
    DEFLATE = 'DEFLATE'
    LZO = 'LZO'
    BROTLI = 'BROTLI'
    ZSTD = 'ZSTD'
    ZLIB = 'ZLIB'


class Condition(RootModel[constr(pattern=r'^[A-Z\_]+$', min_length=1, max_length=128)]):
    root: constr(pattern=r'^[A-Z\_]+$', min_length=1, max_length=128)


class ConditionValue(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class ConflictException(RootModel[Any]):
    root: Any


class CreateColumn(RootModel[bool]):
    root: bool


class CreatedBy(RootModel[str]):
    root: str


class CronExpression(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class DatabaseName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class DatabaseOutputMode(Enum):
    NEW_TABLE = 'NEW_TABLE'


class DatabaseTableName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class DatasetName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class Date(RootModel[datetime]):
    root: datetime


class DatetimeFormat(RootModel[constr(min_length=2, max_length=100)]):
    root: constr(min_length=2, max_length=100)


class DeleteDatasetRequest(BaseModel):
    pass


class DeleteDatasetResponse(BaseModel):
    Name: DatasetName


class DeleteJobRequest(BaseModel):
    pass


class DeleteProjectRequest(BaseModel):
    pass


class DeleteRecipeVersionRequest(BaseModel):
    pass


class DeleteRulesetRequest(BaseModel):
    pass


class DeleteScheduleRequest(BaseModel):
    pass


class Delimiter(RootModel[constr(min_length=1, max_length=1)]):
    root: constr(min_length=1, max_length=1)


class DescribeDatasetRequest(BaseModel):
    pass


class DescribeJobRequest(BaseModel):
    pass


class DescribeJobRunRequest(BaseModel):
    pass


class DescribeProjectRequest(BaseModel):
    pass


class DescribeRecipeRequest(BaseModel):
    pass


class DescribeRulesetRequest(BaseModel):
    pass


class DescribeScheduleRequest(BaseModel):
    pass


class Disabled(RootModel[bool]):
    root: bool


class EncryptionKeyArn(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class EncryptionMode(Enum):
    SSE_KMS = 'SSE-KMS'
    SSE_S3 = 'SSE-S3'


class EntityType(
    RootModel[constr(pattern=r'^[A-Z_][A-Z\\d_]*$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[A-Z_][A-Z\\d_]*$', min_length=1, max_length=128)


class EntityTypeList(RootModel[List[EntityType]]):
    root: List[EntityType] = Field(..., min_length=1)


class ErrorCode(RootModel[constr(pattern=r'^[1-5][0-9][0-9]$')]):
    root: constr(pattern=r'^[1-5][0-9][0-9]$')


class ExecutionTime(RootModel[int]):
    root: int


class Expression(
    RootModel[
        constr(pattern=r'^[<>0-9A-Za-z_.,:)(!= ]+$', min_length=4, max_length=1024)
    ]
):
    root: constr(pattern=r'^[<>0-9A-Za-z_.,:)(!= ]+$', min_length=4, max_length=1024)


class GlueConnectionName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class HeaderRow(RootModel[bool]):
    root: bool


class HiddenColumnList(RootModel[List[ColumnName]]):
    root: List[ColumnName]


class InputFormat(Enum):
    CSV = 'CSV'
    JSON = 'JSON'
    PARQUET = 'PARQUET'
    EXCEL = 'EXCEL'
    ORC = 'ORC'


class InternalServerException(RootModel[Any]):
    root: Any


class JobName(RootModel[constr(min_length=1, max_length=240)]):
    root: constr(min_length=1, max_length=240)


class JobNameList(RootModel[List[JobName]]):
    root: List[JobName] = Field(..., max_length=50)


class JobRunErrorMessage(RootModel[str]):
    root: str


class JobRunId(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class JobRunState(Enum):
    STARTING = 'STARTING'
    RUNNING = 'RUNNING'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    TIMEOUT = 'TIMEOUT'


class JobSize(RootModel[int]):
    root: int


class JobType(Enum):
    PROFILE = 'PROFILE'
    RECIPE = 'RECIPE'


class Key(RootModel[constr(min_length=1, max_length=1280)]):
    root: constr(min_length=1, max_length=1280)


class LastModifiedBy(RootModel[str]):
    root: str


class ListDatasetsRequest(BaseModel):
    pass


class ListJobRunsRequest(BaseModel):
    pass


class ListJobsRequest(BaseModel):
    pass


class ListProjectsRequest(BaseModel):
    pass


class ListRecipeVersionsRequest(BaseModel):
    pass


class ListRecipesRequest(BaseModel):
    pass


class ListRulesetsRequest(BaseModel):
    pass


class ListSchedulesRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class LocaleCode(
    RootModel[constr(pattern=r'^[A-Za-z0-9_\.#@\-]+$', min_length=2, max_length=100)]
):
    root: constr(pattern=r'^[A-Za-z0-9_\.#@\-]+$', min_length=2, max_length=100)


class LogGroupName(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class LogSubscription(Enum):
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'


class MaxCapacity(RootModel[int]):
    root: int


class MaxFiles(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxOutputFiles(RootModel[conint(ge=1, le=999)]):
    root: conint(ge=1, le=999)


class MaxResults100(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxRetries(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class Metadata(BaseModel):
    SourceArn: Optional[Arn] = None


class MultiLine(RootModel[bool]):
    root: bool


class NextToken(RootModel[constr(min_length=1, max_length=2000)]):
    root: constr(min_length=1, max_length=2000)


class OpenedBy(RootModel[str]):
    root: str


class Operation(RootModel[constr(pattern=r'^[A-Z\_]+$', min_length=1, max_length=128)]):
    root: constr(pattern=r'^[A-Z\_]+$', min_length=1, max_length=128)


class Order(Enum):
    DESCENDING = 'DESCENDING'
    ASCENDING = 'ASCENDING'


class OrderedBy(Enum):
    LAST_MODIFIED_DATE = 'LAST_MODIFIED_DATE'


class OutputFormat(Enum):
    CSV = 'CSV'
    JSON = 'JSON'
    PARQUET = 'PARQUET'
    GLUEPARQUET = 'GLUEPARQUET'
    AVRO = 'AVRO'
    ORC = 'ORC'
    XML = 'XML'
    TABLEAUHYPER = 'TABLEAUHYPER'


class OverwriteOutput(RootModel[bool]):
    root: bool


class ParameterName(
    RootModel[constr(pattern=r'^[A-Za-z0-9]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[A-Za-z0-9]+$', min_length=1, max_length=128)


class ParameterType(Enum):
    Datetime = 'Datetime'
    Number = 'Number'
    String = 'String'


class ParameterValue(RootModel[constr(min_length=1, max_length=32768)]):
    root: constr(min_length=1, max_length=32768)


class PathParameterName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class Preview(RootModel[bool]):
    root: bool


class ProjectName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class PublishedBy(RootModel[str]):
    root: str


class QueryString(RootModel[constr(min_length=1, max_length=10000)]):
    root: constr(min_length=1, max_length=10000)


class RecipeDescription(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class RecipeErrorMessage(RootModel[str]):
    root: str


class RecipeName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class RecipeVersion(RootModel[constr(min_length=1, max_length=16)]):
    root: constr(min_length=1, max_length=16)


class RecipeVersionErrorDetail(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage: Optional[RecipeErrorMessage] = None
    RecipeVersion_1: Optional[RecipeVersion] = Field(None, alias='RecipeVersion')


class RecipeVersionList(RootModel[List[RecipeVersion]]):
    root: List[RecipeVersion] = Field(..., max_length=50, min_length=1)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class Result(RootModel[str]):
    root: str


class RowRange(RootModel[int]):
    root: int


class RuleCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class RuleName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class RulesetDescription(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class RulesetName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class S3Location(BaseModel):
    Bucket_1: Bucket = Field(..., alias='Bucket')
    BucketOwner_1: Optional[BucketOwner] = Field(None, alias='BucketOwner')
    Key_1: Optional[Key] = Field(None, alias='Key')


class S3TableOutputOptions(BaseModel):
    Location: S3Location


class SampleMode(Enum):
    FULL_DATASET = 'FULL_DATASET'
    CUSTOM_ROWS = 'CUSTOM_ROWS'


class SampleSize(RootModel[conint(ge=1, le=5000)]):
    root: conint(ge=1, le=5000)


class SampleType(Enum):
    FIRST_N = 'FIRST_N'
    LAST_N = 'LAST_N'
    RANDOM = 'RANDOM'


class ScheduleName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class SendProjectSessionActionResponse(BaseModel):
    ActionId_1: Optional[ActionId] = Field(None, alias='ActionId')
    Name: ProjectName
    Result_1: Optional[Result] = Field(None, alias='Result')


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SessionStatus(Enum):
    ASSIGNED = 'ASSIGNED'
    FAILED = 'FAILED'
    INITIALIZING = 'INITIALIZING'
    PROVISIONING = 'PROVISIONING'
    READY = 'READY'
    RECYCLING = 'RECYCLING'
    ROTATING = 'ROTATING'
    TERMINATED = 'TERMINATED'
    TERMINATING = 'TERMINATING'
    UPDATING = 'UPDATING'


class SheetIndex(RootModel[conint(ge=0, le=200)]):
    root: conint(ge=0, le=200)


class SheetIndexList(RootModel[List[SheetIndex]]):
    root: List[SheetIndex] = Field(..., max_length=1, min_length=1)


class SheetName(RootModel[constr(min_length=1, max_length=31)]):
    root: constr(min_length=1, max_length=31)


class SheetNameList(RootModel[List[SheetName]]):
    root: List[SheetName] = Field(..., max_length=1, min_length=1)


class Source(Enum):
    S3 = 'S3'
    DATA_CATALOG = 'DATA-CATALOG'
    DATABASE = 'DATABASE'


class StartColumnIndex(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class StartJobRunRequest(BaseModel):
    pass


class StartJobRunResponse(BaseModel):
    RunId: JobRunId


class StartProjectSessionRequest(BaseModel):
    AssumeControl_1: Optional[AssumeControl] = Field(None, alias='AssumeControl')


class StartProjectSessionResponse(BaseModel):
    ClientSessionId_1: Optional[ClientSessionId] = Field(None, alias='ClientSessionId')
    Name: ProjectName


class StartRowIndex(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class StartedBy(RootModel[str]):
    root: str


class Statistic(RootModel[constr(pattern=r'^[A-Z\_]+$', min_length=1, max_length=128)]):
    root: constr(pattern=r'^[A-Z\_]+$', min_length=1, max_length=128)


class StatisticList(RootModel[List[Statistic]]):
    root: List[Statistic] = Field(..., min_length=1)


class StepIndex(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class StopJobRunRequest(BaseModel):
    pass


class StopJobRunResponse(BaseModel):
    RunId: JobRunId


class TableName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class TargetColumn(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ThresholdType(Enum):
    GREATER_THAN_OR_EQUAL = 'GREATER_THAN_OR_EQUAL'
    LESS_THAN_OR_EQUAL = 'LESS_THAN_OR_EQUAL'
    GREATER_THAN = 'GREATER_THAN'
    LESS_THAN = 'LESS_THAN'


class ThresholdUnit(Enum):
    COUNT = 'COUNT'
    PERCENTAGE = 'PERCENTAGE'


class ThresholdValue(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class Timeout(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class TimezoneOffset(
    RootModel[
        constr(pattern=r'^(Z|[-+](\d|\d{2}|\d{2}:?\d{2}))$', min_length=1, max_length=6)
    ]
):
    root: constr(
        pattern=r'^(Z|[-+](\d|\d{2}|\d{2}:?\d{2}))$', min_length=1, max_length=6
    )


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateDatasetResponse(BaseModel):
    Name: DatasetName


class UpdateProfileJobResponse(BaseModel):
    Name: JobName


class UpdateProjectResponse(BaseModel):
    LastModifiedDate: Optional[Date] = None
    Name: ProjectName


class UpdateRecipeJobResponse(BaseModel):
    Name: JobName


class UpdateRecipeResponse(BaseModel):
    Name: RecipeName


class UpdateRulesetResponse(BaseModel):
    Name: RulesetName


class UpdateScheduleRequest(BaseModel):
    CronExpression_1: CronExpression = Field(..., alias='CronExpression')
    JobNames: Optional[JobNameList] = None


class UpdateScheduleResponse(BaseModel):
    Name: ScheduleName


class ValidationException(RootModel[Any]):
    root: Any


class ValidationMode(Enum):
    CHECK_ALL = 'CHECK_ALL'


class ValueReference(
    RootModel[constr(pattern=r'^:[A-Za-z0-9_]+$', min_length=2, max_length=128)]
):
    root: constr(pattern=r'^:[A-Za-z0-9_]+$', min_length=2, max_length=128)


class ValuesMap(RootModel[Optional[Dict[str, ConditionValue]]]):
    root: Optional[Dict[str, ConditionValue]] = None


class ViewFrame(BaseModel):
    Analytics: Optional[AnalyticsMode] = None
    ColumnRange_1: Optional[ColumnRange] = Field(None, alias='ColumnRange')
    HiddenColumns: Optional[HiddenColumnList] = None
    RowRange_1: Optional[RowRange] = Field(None, alias='RowRange')
    StartColumnIndex_1: StartColumnIndex = Field(..., alias='StartColumnIndex')
    StartRowIndex_1: Optional[StartRowIndex] = Field(None, alias='StartRowIndex')


class Format(Enum):
    CSV = 'CSV'
    JSON = 'JSON'
    PARQUET = 'PARQUET'
    EXCEL = 'EXCEL'
    ORC = 'ORC'


class JobSample(BaseModel):
    Mode: Optional[SampleMode] = None
    Size: Optional[JobSize] = None


class OutputLocation(BaseModel):
    Bucket_1: Optional[Bucket] = Field(None, alias='Bucket')
    BucketOwner_1: Optional[BucketOwner] = Field(None, alias='BucketOwner')
    Key_1: Optional[Key] = Field(None, alias='Key')


class Sample1(BaseModel):
    Size: Optional[SampleSize] = None
    Type: Optional[SampleType] = None


class ProjectsPostRequest(BaseModel):
    DatasetName: constr(min_length=1, max_length=255) = Field(
        ...,
        description='The name of an existing dataset to associate this project with.',
    )
    Name: constr(min_length=1, max_length=255) = Field(
        ...,
        description='A unique name for the new project. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.',
    )
    RecipeName: constr(min_length=1, max_length=255) = Field(
        ..., description='The name of an existing recipe to associate with the project.'
    )
    RoleArn: constr(min_length=20, max_length=2048) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed for this request.',
    )
    Sample: Optional[Sample1] = Field(
        None,
        description='Represents the sample size and sampling type for DataBrew to use for interactive data analysis.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None, description='Metadata tags to apply to this project.'
    )


class ProjectsNamePutRequest(BaseModel):
    RoleArn: constr(min_length=20, max_length=2048) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the IAM role to be assumed for this request.',
    )
    Sample: Optional[Sample1] = Field(
        None,
        description='Represents the sample size and sampling type for DataBrew to use for interactive data analysis.',
    )


class ViewFrame1(BaseModel):
    Analytics: Optional[AnalyticsMode] = None
    ColumnRange_1: Optional[ColumnRange] = Field(None, alias='ColumnRange')
    HiddenColumns: Optional[HiddenColumnList] = None
    RowRange_1: Optional[RowRange] = Field(None, alias='RowRange')
    StartColumnIndex_1: Optional[StartColumnIndex] = Field(
        None, alias='StartColumnIndex'
    )
    StartRowIndex_1: Optional[StartRowIndex] = Field(None, alias='StartRowIndex')


class ProjectsNameStartProjectSessionPutRequest(BaseModel):
    AssumeControl: Optional[bool] = Field(
        None,
        description='A value that, if true, enables you to take control of a session, even if a different client is currently accessing the project.',
    )


class RecipeReference1(BaseModel):
    Name: Optional[RecipeName] = None
    RecipeVersion_1: Optional[RecipeVersion] = Field(None, alias='RecipeVersion')


class RecipesNameBatchDeleteRecipeVersionPostRequest(BaseModel):
    RecipeVersions: List[RecipeVersion] = Field(
        ...,
        description='An array of version identifiers, for the recipe versions to be deleted. You can specify numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is not supported.',
        max_length=50,
        min_length=1,
    )


class RecipesNamePublishRecipePostRequest(BaseModel):
    Description: Optional[constr(max_length=1024)] = Field(
        None,
        description='A description of the recipe to be published, for this version of the recipe.',
    )


class SchedulesPostRequest(BaseModel):
    CronExpression: constr(min_length=1, max_length=512) = Field(
        ...,
        description='The date or dates and time or times when the jobs are to be run. For more information, see <a href="https://docs.aws.amazon.com/databrew/latest/dg/jobs.cron.html">Cron expressions</a> in the <i>Glue DataBrew Developer Guide</i>.',
    )
    JobNames: Optional[List[JobName]] = Field(
        None,
        description='The name or names of one or more jobs to be run.',
        max_length=50,
    )
    Name: constr(min_length=1, max_length=255) = Field(
        ...,
        description='A unique name for the schedule. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None, description='Metadata tags to apply to this schedule.'
    )


class SchedulesNamePutRequest(BaseModel):
    CronExpression: constr(min_length=1, max_length=512) = Field(
        ...,
        description='The date or dates and time or times when the jobs are to be run. For more information, see <a href="https://docs.aws.amazon.com/databrew/latest/dg/jobs.cron.html">Cron expressions</a> in the <i>Glue DataBrew Developer Guide</i>.',
    )
    JobNames: Optional[List[JobName]] = Field(
        None,
        description='The name or names of one or more jobs to be run for this schedule.',
        max_length=50,
    )


class TagsResourceArnPostRequest(BaseModel):
    Tags: Dict[str, TagValue] = Field(
        ..., description='One or more tags to be assigned to the resource.'
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class AllowedStatistics(BaseModel):
    Statistics: StatisticList


class BatchDeleteRecipeVersionRequest(BaseModel):
    RecipeVersions: RecipeVersionList


class ConditionExpression(BaseModel):
    Condition_1: Condition = Field(..., alias='Condition')
    TargetColumn_1: TargetColumn = Field(..., alias='TargetColumn')
    Value: Optional[ConditionValue] = None


class ConditionExpressionList(RootModel[List[ConditionExpression]]):
    root: List[ConditionExpression]


class CreateDatasetResponse(BaseModel):
    Name: DatasetName


class CreateProfileJobResponse(BaseModel):
    Name: JobName


class CreateProjectResponse(BaseModel):
    Name: ProjectName


class CreateRecipeJobResponse(BaseModel):
    Name: JobName


class CreateRecipeResponse(BaseModel):
    Name: RecipeName


class CreateRulesetResponse(BaseModel):
    Name: RulesetName


class CreateScheduleResponse(BaseModel):
    Name: ScheduleName


class CsvOptions(BaseModel):
    Delimiter_1: Optional[Delimiter] = Field(None, alias='Delimiter')
    HeaderRow_1: Optional[HeaderRow] = Field(None, alias='HeaderRow')


class CsvOutputOptions(BaseModel):
    Delimiter_1: Optional[Delimiter] = Field(None, alias='Delimiter')


class DataCatalogInputDefinition(BaseModel):
    CatalogId_1: Optional[CatalogId] = Field(None, alias='CatalogId')
    DatabaseName_1: DatabaseName = Field(..., alias='DatabaseName')
    TableName_1: TableName = Field(..., alias='TableName')
    TempDirectory: Optional[S3Location] = None


class DatabaseInputDefinition(BaseModel):
    DatabaseTableName_1: Optional[DatabaseTableName] = Field(
        None, alias='DatabaseTableName'
    )
    GlueConnectionName_1: GlueConnectionName = Field(..., alias='GlueConnectionName')
    QueryString_1: Optional[QueryString] = Field(None, alias='QueryString')
    TempDirectory: Optional[S3Location] = None


class DatabaseTableOutputOptions(BaseModel):
    TableName: DatabaseTableName
    TempDirectory: Optional[S3Location] = None


class DatetimeOptions(BaseModel):
    Format: DatetimeFormat
    LocaleCode_1: Optional[LocaleCode] = Field(None, alias='LocaleCode')
    TimezoneOffset_1: Optional[TimezoneOffset] = Field(None, alias='TimezoneOffset')


class DeleteJobResponse(BaseModel):
    Name: JobName


class DeleteProjectResponse(BaseModel):
    Name: ProjectName


class DeleteRecipeVersionResponse(BaseModel):
    Name: RecipeName
    RecipeVersion_1: RecipeVersion = Field(..., alias='RecipeVersion')


class DeleteRulesetResponse(BaseModel):
    Name: RulesetName


class DeleteScheduleResponse(BaseModel):
    Name: ScheduleName


class ExcelOptions(BaseModel):
    HeaderRow_1: Optional[HeaderRow] = Field(None, alias='HeaderRow')
    SheetIndexes: Optional[SheetIndexList] = None
    SheetNames: Optional[SheetNameList] = None


class FilesLimit(BaseModel):
    MaxFiles_1: MaxFiles = Field(..., alias='MaxFiles')
    Order_1: Optional[Order] = Field(None, alias='Order')
    OrderedBy_1: Optional[OrderedBy] = Field(None, alias='OrderedBy')


class FilterExpression(BaseModel):
    Expression_1: Expression = Field(..., alias='Expression')
    ValuesMap_1: ValuesMap = Field(..., alias='ValuesMap')


class Input(BaseModel):
    DataCatalogInputDefinition_1: Optional[DataCatalogInputDefinition] = Field(
        None, alias='DataCatalogInputDefinition'
    )
    DatabaseInputDefinition_1: Optional[DatabaseInputDefinition] = Field(
        None, alias='DatabaseInputDefinition'
    )
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    S3InputDefinition: Optional[S3Location] = None


class JsonOptions(BaseModel):
    MultiLine_1: Optional[MultiLine] = Field(None, alias='MultiLine')


class OutputFormatOptions(BaseModel):
    Csv: Optional[CsvOutputOptions] = None


class ParameterMap(RootModel[Optional[Dict[str, ParameterValue]]]):
    root: Optional[Dict[str, ParameterValue]] = None


class PublishRecipeRequest(BaseModel):
    Description: Optional[RecipeDescription] = None


class PublishRecipeResponse(BaseModel):
    Name: RecipeName


class RecipeAction(BaseModel):
    Operation_1: Operation = Field(..., alias='Operation')
    Parameters: Optional[ParameterMap] = None


class RecipeErrorList(RootModel[List[RecipeVersionErrorDetail]]):
    root: List[RecipeVersionErrorDetail]


class RecipeReference(BaseModel):
    Name: RecipeName
    RecipeVersion_1: Optional[RecipeVersion] = Field(None, alias='RecipeVersion')


class RecipeStep(BaseModel):
    Action: RecipeAction
    ConditionExpressions: Optional[ConditionExpressionList] = None


class RecipeStepList(RootModel[List[RecipeStep]]):
    root: List[RecipeStep]


class Sample(BaseModel):
    Size: Optional[SampleSize] = None
    Type: SampleType


class SendProjectSessionActionRequest(BaseModel):
    ClientSessionId_1: Optional[ClientSessionId] = Field(None, alias='ClientSessionId')
    Preview_1: Optional[Preview] = Field(None, alias='Preview')
    RecipeStep_1: Optional[RecipeStep] = Field(None, alias='RecipeStep')
    StepIndex_1: Optional[StepIndex] = Field(None, alias='StepIndex')
    ViewFrame_1: Optional[ViewFrame] = Field(None, alias='ViewFrame')


class StatisticOverride(BaseModel):
    Parameters: ParameterMap
    Statistic_1: Statistic = Field(..., alias='Statistic')


class StatisticOverrideList(RootModel[List[StatisticOverride]]):
    root: List[StatisticOverride] = Field(..., min_length=1)


class StatisticsConfiguration(BaseModel):
    IncludedStatistics: Optional[StatisticList] = None
    Overrides: Optional[StatisticOverrideList] = None


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    Tags: TagMap


class Threshold(BaseModel):
    Type: Optional[ThresholdType] = None
    Unit: Optional[ThresholdUnit] = None
    Value: ThresholdValue


class UpdateProjectRequest(BaseModel):
    RoleArn: Arn
    Sample_1: Optional[Sample] = Field(None, alias='Sample')


class UpdateRecipeRequest(BaseModel):
    Description: Optional[RecipeDescription] = None
    Steps: Optional[RecipeStepList] = None


class ValidationConfiguration(BaseModel):
    RulesetArn: Arn
    ValidationMode_1: Optional[ValidationMode] = Field(None, alias='ValidationMode')


class ValidationConfigurationList(RootModel[List[ValidationConfiguration]]):
    root: List[ValidationConfiguration] = Field(..., min_length=1)


class FormatOptions(BaseModel):
    Csv: Optional[CsvOptions] = None
    Excel: Optional[ExcelOptions] = None
    Json: Optional[JsonOptions] = None


class RecipeStep1(BaseModel):
    Action: Optional[RecipeAction] = None
    ConditionExpressions: Optional[ConditionExpressionList] = None


class ProjectsNameSendProjectSessionActionPutRequest(BaseModel):
    ClientSessionId: Optional[SecretStr] = Field(
        None,
        description="A unique identifier for an interactive session that's currently open and ready for work. The action will be performed on this session.",
    )
    Preview: Optional[bool] = Field(
        None,
        description='If true, the result of the recipe step will be returned, but not applied.',
    )
    RecipeStep: Optional[RecipeStep1] = Field(
        None,
        description='Represents a single step from a DataBrew recipe to be performed.',
    )
    StepIndex: Optional[conint(ge=0)] = Field(
        None,
        description='The index from which to preview a step. This index is used to preview the result of steps that have already been applied, so that the resulting view frame is from earlier in the view frame stack.',
    )
    ViewFrame: Optional[ViewFrame1] = Field(
        None, description='Represents the data being transformed during an action.'
    )


class RecipesPostRequest(BaseModel):
    Description: Optional[constr(max_length=1024)] = Field(
        None, description='A description for the recipe.'
    )
    Name: constr(min_length=1, max_length=255) = Field(
        ...,
        description='A unique name for the recipe. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.',
    )
    Steps: List[RecipeStep] = Field(
        ...,
        description='An array containing the steps to be performed by the recipe. Each recipe step consists of one recipe action and (optionally) an array of condition expressions.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None, description='Metadata tags to apply to this recipe.'
    )


class RecipesNamePutRequest(BaseModel):
    Description: Optional[constr(max_length=1024)] = Field(
        None, description='A description of the recipe.'
    )
    Steps: Optional[List[RecipeStep]] = Field(
        None,
        description='One or more steps to be performed by the recipe. Each step consists of an action, and the conditions under which the action should succeed.',
    )


class AllowedStatisticList(RootModel[List[AllowedStatistics]]):
    root: List[AllowedStatistics] = Field(..., min_length=1)


class BatchDeleteRecipeVersionResponse(BaseModel):
    Errors: Optional[RecipeErrorList] = None
    Name: RecipeName


class ColumnStatisticsConfiguration(BaseModel):
    Selectors: Optional[ColumnSelectorList] = None
    Statistics: StatisticsConfiguration


class ColumnStatisticsConfigurationList(RootModel[List[ColumnStatisticsConfiguration]]):
    root: List[ColumnStatisticsConfiguration] = Field(..., min_length=1)


class CreateProjectRequest(BaseModel):
    DatasetName_1: DatasetName = Field(..., alias='DatasetName')
    Name: ProjectName
    RecipeName_1: RecipeName = Field(..., alias='RecipeName')
    RoleArn: Arn
    Sample_1: Optional[Sample] = Field(None, alias='Sample')
    Tags: Optional[TagMap] = None


class CreateRecipeRequest(BaseModel):
    Description: Optional[RecipeDescription] = None
    Name: RecipeName
    Steps: RecipeStepList
    Tags: Optional[TagMap] = None


class CreateScheduleRequest(BaseModel):
    CronExpression_1: CronExpression = Field(..., alias='CronExpression')
    JobNames: Optional[JobNameList] = None
    Name: ScheduleName
    Tags: Optional[TagMap] = None


class DataCatalogOutput(BaseModel):
    CatalogId_1: Optional[CatalogId] = Field(None, alias='CatalogId')
    DatabaseName_1: DatabaseName = Field(..., alias='DatabaseName')
    DatabaseOptions: Optional[DatabaseTableOutputOptions] = None
    Overwrite: Optional[OverwriteOutput] = None
    S3Options: Optional[S3TableOutputOptions] = None
    TableName_1: TableName = Field(..., alias='TableName')


class DataCatalogOutputList(RootModel[List[DataCatalogOutput]]):
    root: List[DataCatalogOutput] = Field(..., min_length=1)


class DatabaseOutput(BaseModel):
    DatabaseOptions: DatabaseTableOutputOptions
    DatabaseOutputMode_1: Optional[DatabaseOutputMode] = Field(
        None, alias='DatabaseOutputMode'
    )
    GlueConnectionName_1: GlueConnectionName = Field(..., alias='GlueConnectionName')


class DatabaseOutputList(RootModel[List[DatabaseOutput]]):
    root: List[DatabaseOutput] = Field(..., min_length=1)


class DatasetParameter(BaseModel):
    CreateColumn_1: Optional[CreateColumn] = Field(None, alias='CreateColumn')
    DatetimeOptions_1: Optional[DatetimeOptions] = Field(None, alias='DatetimeOptions')
    Filter: Optional[FilterExpression] = None
    Name: PathParameterName
    Type: ParameterType


class DescribeProjectResponse(BaseModel):
    CreateDate: Optional[Date] = None
    CreatedBy_1: Optional[CreatedBy] = Field(None, alias='CreatedBy')
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    LastModifiedBy_1: Optional[LastModifiedBy] = Field(None, alias='LastModifiedBy')
    LastModifiedDate: Optional[Date] = None
    Name: ProjectName
    OpenDate: Optional[Date] = None
    OpenedBy_1: Optional[OpenedBy] = Field(None, alias='OpenedBy')
    RecipeName_1: Optional[RecipeName] = Field(None, alias='RecipeName')
    ResourceArn: Optional[Arn] = None
    RoleArn: Optional[Arn] = None
    Sample_1: Optional[Sample] = Field(None, alias='Sample')
    SessionStatus_1: Optional[SessionStatus] = Field(None, alias='SessionStatus')
    Tags: Optional[TagMap] = None


class DescribeRecipeResponse(BaseModel):
    CreateDate: Optional[Date] = None
    CreatedBy_1: Optional[CreatedBy] = Field(None, alias='CreatedBy')
    Description: Optional[RecipeDescription] = None
    LastModifiedBy_1: Optional[LastModifiedBy] = Field(None, alias='LastModifiedBy')
    LastModifiedDate: Optional[Date] = None
    Name: RecipeName
    ProjectName_1: Optional[ProjectName] = Field(None, alias='ProjectName')
    PublishedBy_1: Optional[PublishedBy] = Field(None, alias='PublishedBy')
    PublishedDate: Optional[Date] = None
    RecipeVersion_1: Optional[RecipeVersion] = Field(None, alias='RecipeVersion')
    ResourceArn: Optional[Arn] = None
    Steps: Optional[RecipeStepList] = None
    Tags: Optional[TagMap] = None


class DescribeScheduleResponse(BaseModel):
    CreateDate: Optional[Date] = None
    CreatedBy_1: Optional[CreatedBy] = Field(None, alias='CreatedBy')
    CronExpression_1: Optional[CronExpression] = Field(None, alias='CronExpression')
    JobNames: Optional[JobNameList] = None
    LastModifiedBy_1: Optional[LastModifiedBy] = Field(None, alias='LastModifiedBy')
    LastModifiedDate: Optional[Date] = None
    Name: ScheduleName
    ResourceArn: Optional[Arn] = None
    Tags: Optional[TagMap] = None


class EntityDetectorConfiguration(BaseModel):
    AllowedStatistics: Optional[AllowedStatisticList] = None
    EntityTypes: EntityTypeList


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagMap] = None


class Output(BaseModel):
    CompressionFormat_1: Optional[CompressionFormat] = Field(
        None, alias='CompressionFormat'
    )
    Format: Optional[OutputFormat] = None
    FormatOptions: Optional[OutputFormatOptions] = None
    Location: S3Location
    MaxOutputFiles_1: Optional[MaxOutputFiles] = Field(None, alias='MaxOutputFiles')
    Overwrite: Optional[OverwriteOutput] = None
    PartitionColumns: Optional[ColumnNameList] = None


class OutputList(RootModel[List[Output]]):
    root: List[Output] = Field(..., min_length=1)


class PathParametersMap(RootModel[Optional[Dict[str, DatasetParameter]]]):
    root: Optional[Dict[str, DatasetParameter]] = None


class ProfileConfiguration(BaseModel):
    ColumnStatisticsConfigurations: Optional[ColumnStatisticsConfigurationList] = None
    DatasetStatisticsConfiguration: Optional[StatisticsConfiguration] = None
    EntityDetectorConfiguration_1: Optional[EntityDetectorConfiguration] = Field(
        None, alias='EntityDetectorConfiguration'
    )
    ProfileColumns: Optional[ColumnSelectorList] = None


class Project(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    CreateDate: Optional[Date] = None
    CreatedBy_1: Optional[CreatedBy] = Field(None, alias='CreatedBy')
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    LastModifiedBy_1: Optional[LastModifiedBy] = Field(None, alias='LastModifiedBy')
    LastModifiedDate: Optional[Date] = None
    Name: ProjectName
    OpenDate: Optional[Date] = None
    OpenedBy_1: Optional[OpenedBy] = Field(None, alias='OpenedBy')
    RecipeName_1: RecipeName = Field(..., alias='RecipeName')
    ResourceArn: Optional[Arn] = None
    RoleArn: Optional[Arn] = None
    Sample_1: Optional[Sample] = Field(None, alias='Sample')
    Tags: Optional[TagMap] = None


class ProjectList(RootModel[List[Project]]):
    root: List[Project]


class Recipe(BaseModel):
    CreateDate: Optional[Date] = None
    CreatedBy_1: Optional[CreatedBy] = Field(None, alias='CreatedBy')
    Description: Optional[RecipeDescription] = None
    LastModifiedBy_1: Optional[LastModifiedBy] = Field(None, alias='LastModifiedBy')
    LastModifiedDate: Optional[Date] = None
    Name: RecipeName
    ProjectName_1: Optional[ProjectName] = Field(None, alias='ProjectName')
    PublishedBy_1: Optional[PublishedBy] = Field(None, alias='PublishedBy')
    PublishedDate: Optional[Date] = None
    RecipeVersion_1: Optional[RecipeVersion] = Field(None, alias='RecipeVersion')
    ResourceArn: Optional[Arn] = None
    Steps: Optional[RecipeStepList] = None
    Tags: Optional[TagMap] = None


class RecipeList(RootModel[List[Recipe]]):
    root: List[Recipe]


class Rule(BaseModel):
    CheckExpression: Expression
    ColumnSelectors: Optional[ColumnSelectorList] = None
    Disabled_1: Optional[Disabled] = Field(None, alias='Disabled')
    Name: RuleName
    SubstitutionMap: Optional[ValuesMap] = None
    Threshold_1: Optional[Threshold] = Field(None, alias='Threshold')


class RuleList(RootModel[List[Rule]]):
    root: List[Rule] = Field(..., min_length=1)


class RulesetItem(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    CreateDate: Optional[Date] = None
    CreatedBy_1: Optional[CreatedBy] = Field(None, alias='CreatedBy')
    Description: Optional[RulesetDescription] = None
    LastModifiedBy_1: Optional[LastModifiedBy] = Field(None, alias='LastModifiedBy')
    LastModifiedDate: Optional[Date] = None
    Name: RulesetName
    ResourceArn: Optional[Arn] = None
    RuleCount_1: Optional[RuleCount] = Field(None, alias='RuleCount')
    Tags: Optional[TagMap] = None
    TargetArn: Arn


class RulesetItemList(RootModel[List[RulesetItem]]):
    root: List[RulesetItem]


class Schedule(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    CreateDate: Optional[Date] = None
    CreatedBy_1: Optional[CreatedBy] = Field(None, alias='CreatedBy')
    CronExpression_1: Optional[CronExpression] = Field(None, alias='CronExpression')
    JobNames: Optional[JobNameList] = None
    LastModifiedBy_1: Optional[LastModifiedBy] = Field(None, alias='LastModifiedBy')
    LastModifiedDate: Optional[Date] = None
    Name: ScheduleName
    ResourceArn: Optional[Arn] = None
    Tags: Optional[TagMap] = None


class ScheduleList(RootModel[List[Schedule]]):
    root: List[Schedule]


class UpdateProfileJobRequest(BaseModel):
    Configuration: Optional[ProfileConfiguration] = None
    EncryptionKeyArn_1: Optional[EncryptionKeyArn] = Field(
        None, alias='EncryptionKeyArn'
    )
    EncryptionMode_1: Optional[EncryptionMode] = Field(None, alias='EncryptionMode')
    JobSample_1: Optional[JobSample] = Field(None, alias='JobSample')
    LogSubscription_1: Optional[LogSubscription] = Field(None, alias='LogSubscription')
    MaxCapacity_1: Optional[MaxCapacity] = Field(None, alias='MaxCapacity')
    MaxRetries_1: Optional[MaxRetries] = Field(None, alias='MaxRetries')
    OutputLocation: S3Location
    RoleArn: Arn
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    ValidationConfigurations: Optional[ValidationConfigurationList] = None


class UpdateRecipeJobRequest(BaseModel):
    DataCatalogOutputs: Optional[DataCatalogOutputList] = None
    DatabaseOutputs: Optional[DatabaseOutputList] = None
    EncryptionKeyArn_1: Optional[EncryptionKeyArn] = Field(
        None, alias='EncryptionKeyArn'
    )
    EncryptionMode_1: Optional[EncryptionMode] = Field(None, alias='EncryptionMode')
    LogSubscription_1: Optional[LogSubscription] = Field(None, alias='LogSubscription')
    MaxCapacity_1: Optional[MaxCapacity] = Field(None, alias='MaxCapacity')
    MaxRetries_1: Optional[MaxRetries] = Field(None, alias='MaxRetries')
    Outputs: Optional[OutputList] = None
    RoleArn: Arn
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')


class UpdateRulesetRequest(BaseModel):
    Description: Optional[RulesetDescription] = None
    Rules: RuleList


class PathOptions(BaseModel):
    FilesLimit_1: Optional[FilesLimit] = Field(None, alias='FilesLimit')
    LastModifiedDateCondition: Optional[FilterExpression] = None
    Parameters: Optional[PathParametersMap] = None


class DatasetsPostRequest(BaseModel):
    Format_1: Optional[Format] = Field(
        None,
        alias='Format',
        description='The file format of a dataset that is created from an Amazon S3 file or folder.',
    )
    FormatOptions_1: Optional[FormatOptions] = Field(
        None,
        alias='FormatOptions',
        description='Represents a set of options that define the structure of either comma-separated value (CSV), Excel, or JSON input.',
    )
    Input_1: Input = Field(
        ...,
        alias='Input',
        description='Represents information on how DataBrew can find data, in either the Glue Data Catalog or Amazon S3.',
    )
    Name: constr(min_length=1, max_length=255) = Field(
        ...,
        description='The name of the dataset to be created. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.',
    )
    PathOptions_1: Optional[PathOptions] = Field(
        None,
        alias='PathOptions',
        description='Represents a set of options that define how DataBrew selects files for a given Amazon S3 path in a dataset.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None, description='Metadata tags to apply to this dataset.'
    )


class DatasetsNamePutRequest(BaseModel):
    Format_1: Optional[Format] = Field(
        None,
        alias='Format',
        description='The file format of a dataset that is created from an Amazon S3 file or folder.',
    )
    FormatOptions_1: Optional[FormatOptions] = Field(
        None,
        alias='FormatOptions',
        description='Represents a set of options that define the structure of either comma-separated value (CSV), Excel, or JSON input.',
    )
    Input_1: Input = Field(
        ...,
        alias='Input',
        description='Represents information on how DataBrew can find data, in either the Glue Data Catalog or Amazon S3.',
    )
    PathOptions_1: Optional[PathOptions] = Field(
        None,
        alias='PathOptions',
        description='Represents a set of options that define how DataBrew selects files for a given Amazon S3 path in a dataset.',
    )


class Configuration(BaseModel):
    ColumnStatisticsConfigurations: Optional[ColumnStatisticsConfigurationList] = None
    DatasetStatisticsConfiguration: Optional[StatisticsConfiguration] = None
    EntityDetectorConfiguration_1: Optional[EntityDetectorConfiguration] = Field(
        None, alias='EntityDetectorConfiguration'
    )
    ProfileColumns: Optional[ColumnSelectorList] = None


class ProfileJobsPostRequest(BaseModel):
    Configuration_1: Optional[Configuration] = Field(
        None,
        alias='Configuration',
        description='Configuration for profile jobs. Configuration can be used to select columns, do evaluations, and override default parameters of evaluations. When configuration is undefined, the profile job will apply default settings to all supported columns. ',
    )
    DatasetName: constr(min_length=1, max_length=255) = Field(
        ..., description='The name of the dataset that this job is to act upon.'
    )
    EncryptionKeyArn: Optional[constr(min_length=20, max_length=2048)] = Field(
        None,
        description='The Amazon Resource Name (ARN) of an encryption key that is used to protect the job.',
    )
    EncryptionMode_1: Optional[EncryptionMode] = Field(
        None,
        alias='EncryptionMode',
        description='<p>The encryption mode for the job, which can be one of the following:</p> <ul> <li> <p> <code>SSE-KMS</code> - <code>SSE-KMS</code> - Server-side encryption with KMS-managed keys.</p> </li> <li> <p> <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p> </li> </ul>',
    )
    JobSample_1: Optional[JobSample] = Field(
        None,
        alias='JobSample',
        description="A sample configuration for profile jobs only, which determines the number of rows on which the profile job is run. If a <code>JobSample</code> value isn't provided, the default is used. The default value is CUSTOM_ROWS for the mode parameter and 20,000 for the size parameter.",
    )
    LogSubscription_1: Optional[LogSubscription] = Field(
        None,
        alias='LogSubscription',
        description='Enables or disables Amazon CloudWatch logging for the job. If logging is enabled, CloudWatch writes one log stream for each job run.',
    )
    MaxCapacity: Optional[int] = Field(
        None,
        description='The maximum number of nodes that DataBrew can use when the job processes data.',
    )
    MaxRetries: Optional[conint(ge=0)] = Field(
        None,
        description='The maximum number of times to retry the job after a job run fails.',
    )
    Name: constr(min_length=1, max_length=240) = Field(
        ...,
        description='The name of the job to be created. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.',
    )
    OutputLocation_1: OutputLocation = Field(
        ...,
        alias='OutputLocation',
        description='Represents an Amazon S3 location (bucket name, bucket owner, and object key) where DataBrew can read input data, or write output from a job.',
    )
    RoleArn: constr(min_length=20, max_length=2048) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None, description='Metadata tags to apply to this job.'
    )
    Timeout: Optional[conint(ge=0)] = Field(
        None,
        description="The job's timeout in minutes. A job that attempts to run longer than this timeout period ends with a status of <code>TIMEOUT</code>.",
    )
    ValidationConfigurations: Optional[List[ValidationConfiguration]] = Field(
        None,
        description='List of validation configurations that are applied to the profile job.',
        min_length=1,
    )


class ProfileJobsNamePutRequest(BaseModel):
    Configuration_1: Optional[Configuration] = Field(
        None,
        alias='Configuration',
        description='Configuration for profile jobs. Configuration can be used to select columns, do evaluations, and override default parameters of evaluations. When configuration is undefined, the profile job will apply default settings to all supported columns. ',
    )
    EncryptionKeyArn: Optional[constr(min_length=20, max_length=2048)] = Field(
        None,
        description='The Amazon Resource Name (ARN) of an encryption key that is used to protect the job.',
    )
    EncryptionMode_1: Optional[EncryptionMode] = Field(
        None,
        alias='EncryptionMode',
        description='<p>The encryption mode for the job, which can be one of the following:</p> <ul> <li> <p> <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p> </li> <li> <p> <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p> </li> </ul>',
    )
    JobSample_1: Optional[JobSample] = Field(
        None,
        alias='JobSample',
        description="A sample configuration for profile jobs only, which determines the number of rows on which the profile job is run. If a <code>JobSample</code> value isn't provided, the default is used. The default value is CUSTOM_ROWS for the mode parameter and 20,000 for the size parameter.",
    )
    LogSubscription_1: Optional[LogSubscription] = Field(
        None,
        alias='LogSubscription',
        description='Enables or disables Amazon CloudWatch logging for the job. If logging is enabled, CloudWatch writes one log stream for each job run.',
    )
    MaxCapacity: Optional[int] = Field(
        None,
        description='The maximum number of compute nodes that DataBrew can use when the job processes data.',
    )
    MaxRetries: Optional[conint(ge=0)] = Field(
        None,
        description='The maximum number of times to retry the job after a job run fails.',
    )
    OutputLocation_1: OutputLocation = Field(
        ...,
        alias='OutputLocation',
        description='Represents an Amazon S3 location (bucket name, bucket owner, and object key) where DataBrew can read input data, or write output from a job.',
    )
    RoleArn: constr(min_length=20, max_length=2048) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.',
    )
    Timeout: Optional[conint(ge=0)] = Field(
        None,
        description="The job's timeout in minutes. A job that attempts to run longer than this timeout period ends with a status of <code>TIMEOUT</code>.",
    )
    ValidationConfigurations: Optional[List[ValidationConfiguration]] = Field(
        None,
        description='List of validation configurations that are applied to the profile job.',
        min_length=1,
    )


class RecipeJobsPostRequest(BaseModel):
    DataCatalogOutputs: Optional[List[DataCatalogOutput]] = Field(
        None,
        description='One or more artifacts that represent the Glue Data Catalog output from running the job.',
        min_length=1,
    )
    DatabaseOutputs: Optional[List[DatabaseOutput]] = Field(
        None,
        description='Represents a list of JDBC database output objects which defines the output destination for a DataBrew recipe job to write to. ',
        min_length=1,
    )
    DatasetName: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='The name of the dataset that this job processes.'
    )
    EncryptionKeyArn: Optional[constr(min_length=20, max_length=2048)] = Field(
        None,
        description='The Amazon Resource Name (ARN) of an encryption key that is used to protect the job.',
    )
    EncryptionMode_1: Optional[EncryptionMode] = Field(
        None,
        alias='EncryptionMode',
        description='<p>The encryption mode for the job, which can be one of the following:</p> <ul> <li> <p> <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p> </li> <li> <p> <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p> </li> </ul>',
    )
    LogSubscription_1: Optional[LogSubscription] = Field(
        None,
        alias='LogSubscription',
        description='Enables or disables Amazon CloudWatch logging for the job. If logging is enabled, CloudWatch writes one log stream for each job run.',
    )
    MaxCapacity: Optional[int] = Field(
        None,
        description='The maximum number of nodes that DataBrew can consume when the job processes data.',
    )
    MaxRetries: Optional[conint(ge=0)] = Field(
        None,
        description='The maximum number of times to retry the job after a job run fails.',
    )
    Name: constr(min_length=1, max_length=240) = Field(
        ...,
        description='A unique name for the job. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.',
    )
    Outputs: Optional[List[Output]] = Field(
        None,
        description='One or more artifacts that represent the output from running the job.',
        min_length=1,
    )
    ProjectName: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description='Either the name of an existing project, or a combination of a recipe and a dataset to associate with the recipe.',
    )
    RecipeReference: Optional[RecipeReference1] = Field(
        None, description='Represents the name and version of a DataBrew recipe.'
    )
    RoleArn: constr(min_length=20, max_length=2048) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None, description='Metadata tags to apply to this job.'
    )
    Timeout: Optional[conint(ge=0)] = Field(
        None,
        description="The job's timeout in minutes. A job that attempts to run longer than this timeout period ends with a status of <code>TIMEOUT</code>.",
    )


class RecipeJobsNamePutRequest(BaseModel):
    DataCatalogOutputs: Optional[List[DataCatalogOutput]] = Field(
        None,
        description='One or more artifacts that represent the Glue Data Catalog output from running the job.',
        min_length=1,
    )
    DatabaseOutputs: Optional[List[DatabaseOutput]] = Field(
        None,
        description='Represents a list of JDBC database output objects which defines the output destination for a DataBrew recipe job to write into.',
        min_length=1,
    )
    EncryptionKeyArn: Optional[constr(min_length=20, max_length=2048)] = Field(
        None,
        description='The Amazon Resource Name (ARN) of an encryption key that is used to protect the job.',
    )
    EncryptionMode_1: Optional[EncryptionMode] = Field(
        None,
        alias='EncryptionMode',
        description='<p>The encryption mode for the job, which can be one of the following:</p> <ul> <li> <p> <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p> </li> <li> <p> <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p> </li> </ul>',
    )
    LogSubscription_1: Optional[LogSubscription] = Field(
        None,
        alias='LogSubscription',
        description='Enables or disables Amazon CloudWatch logging for the job. If logging is enabled, CloudWatch writes one log stream for each job run.',
    )
    MaxCapacity: Optional[int] = Field(
        None,
        description='The maximum number of nodes that DataBrew can consume when the job processes data.',
    )
    MaxRetries: Optional[conint(ge=0)] = Field(
        None,
        description='The maximum number of times to retry the job after a job run fails.',
    )
    Outputs: Optional[List[Output]] = Field(
        None,
        description='One or more artifacts that represent the output from running the job. ',
        min_length=1,
    )
    RoleArn: constr(min_length=20, max_length=2048) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.',
    )
    Timeout: Optional[conint(ge=0)] = Field(
        None,
        description="The job's timeout in minutes. A job that attempts to run longer than this timeout period ends with a status of <code>TIMEOUT</code>.",
    )


class RulesetsPostRequest(BaseModel):
    Description: Optional[constr(max_length=1024)] = Field(
        None, description='The description of the ruleset.'
    )
    Name: constr(min_length=1, max_length=255) = Field(
        ...,
        description='The name of the ruleset to be created. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.',
    )
    Rules: List[Rule] = Field(
        ...,
        description='A list of rules that are defined with the ruleset. A rule includes one or more checks to be validated on a DataBrew dataset.',
        min_length=1,
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None, description='Metadata tags to apply to the ruleset.'
    )
    TargetArn: constr(min_length=20, max_length=2048) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of a resource (dataset) that the ruleset is associated with.',
    )


class RulesetsNamePutRequest(BaseModel):
    Description: Optional[constr(max_length=1024)] = Field(
        None, description='The description of the ruleset.'
    )
    Rules: List[Rule] = Field(
        ...,
        description='A list of rules that are defined with the ruleset. A rule includes one or more checks to be validated on a DataBrew dataset.',
        min_length=1,
    )


class CreateProfileJobRequest(BaseModel):
    Configuration: Optional[ProfileConfiguration] = None
    DatasetName_1: DatasetName = Field(..., alias='DatasetName')
    EncryptionKeyArn_1: Optional[EncryptionKeyArn] = Field(
        None, alias='EncryptionKeyArn'
    )
    EncryptionMode_1: Optional[EncryptionMode] = Field(None, alias='EncryptionMode')
    JobSample_1: Optional[JobSample] = Field(None, alias='JobSample')
    LogSubscription_1: Optional[LogSubscription] = Field(None, alias='LogSubscription')
    MaxCapacity_1: Optional[MaxCapacity] = Field(None, alias='MaxCapacity')
    MaxRetries_1: Optional[MaxRetries] = Field(None, alias='MaxRetries')
    Name: JobName
    OutputLocation: S3Location
    RoleArn: Arn
    Tags: Optional[TagMap] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    ValidationConfigurations: Optional[ValidationConfigurationList] = None


class CreateRecipeJobRequest(BaseModel):
    DataCatalogOutputs: Optional[DataCatalogOutputList] = None
    DatabaseOutputs: Optional[DatabaseOutputList] = None
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    EncryptionKeyArn_1: Optional[EncryptionKeyArn] = Field(
        None, alias='EncryptionKeyArn'
    )
    EncryptionMode_1: Optional[EncryptionMode] = Field(None, alias='EncryptionMode')
    LogSubscription_1: Optional[LogSubscription] = Field(None, alias='LogSubscription')
    MaxCapacity_1: Optional[MaxCapacity] = Field(None, alias='MaxCapacity')
    MaxRetries_1: Optional[MaxRetries] = Field(None, alias='MaxRetries')
    Name: JobName
    Outputs: Optional[OutputList] = None
    ProjectName_1: Optional[ProjectName] = Field(None, alias='ProjectName')
    RecipeReference_1: Optional[RecipeReference] = Field(None, alias='RecipeReference')
    RoleArn: Arn
    Tags: Optional[TagMap] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')


class CreateRulesetRequest(BaseModel):
    Description: Optional[RulesetDescription] = None
    Name: RulesetName
    Rules: RuleList
    Tags: Optional[TagMap] = None
    TargetArn: Arn


class DescribeJobResponse(BaseModel):
    CreateDate: Optional[Date] = None
    CreatedBy_1: Optional[CreatedBy] = Field(None, alias='CreatedBy')
    DataCatalogOutputs: Optional[DataCatalogOutputList] = None
    DatabaseOutputs: Optional[DatabaseOutputList] = None
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    EncryptionKeyArn_1: Optional[EncryptionKeyArn] = Field(
        None, alias='EncryptionKeyArn'
    )
    EncryptionMode_1: Optional[EncryptionMode] = Field(None, alias='EncryptionMode')
    JobSample_1: Optional[JobSample] = Field(None, alias='JobSample')
    LastModifiedBy_1: Optional[LastModifiedBy] = Field(None, alias='LastModifiedBy')
    LastModifiedDate: Optional[Date] = None
    LogSubscription_1: Optional[LogSubscription] = Field(None, alias='LogSubscription')
    MaxCapacity_1: Optional[MaxCapacity] = Field(None, alias='MaxCapacity')
    MaxRetries_1: Optional[MaxRetries] = Field(None, alias='MaxRetries')
    Name: JobName
    Outputs: Optional[OutputList] = None
    ProfileConfiguration_1: Optional[ProfileConfiguration] = Field(
        None, alias='ProfileConfiguration'
    )
    ProjectName_1: Optional[ProjectName] = Field(None, alias='ProjectName')
    RecipeReference_1: Optional[RecipeReference] = Field(None, alias='RecipeReference')
    ResourceArn: Optional[Arn] = None
    RoleArn: Optional[Arn] = None
    Tags: Optional[TagMap] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    Type: Optional[JobType] = None
    ValidationConfigurations: Optional[ValidationConfigurationList] = None


class DescribeJobRunResponse(BaseModel):
    Attempt_1: Optional[Attempt] = Field(None, alias='Attempt')
    CompletedOn: Optional[Date] = None
    DataCatalogOutputs: Optional[DataCatalogOutputList] = None
    DatabaseOutputs: Optional[DatabaseOutputList] = None
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    ErrorMessage: Optional[JobRunErrorMessage] = None
    ExecutionTime_1: Optional[ExecutionTime] = Field(None, alias='ExecutionTime')
    JobName_1: JobName = Field(..., alias='JobName')
    JobSample_1: Optional[JobSample] = Field(None, alias='JobSample')
    LogGroupName_1: Optional[LogGroupName] = Field(None, alias='LogGroupName')
    LogSubscription_1: Optional[LogSubscription] = Field(None, alias='LogSubscription')
    Outputs: Optional[OutputList] = None
    ProfileConfiguration_1: Optional[ProfileConfiguration] = Field(
        None, alias='ProfileConfiguration'
    )
    RecipeReference_1: Optional[RecipeReference] = Field(None, alias='RecipeReference')
    RunId: Optional[JobRunId] = None
    StartedBy_1: Optional[StartedBy] = Field(None, alias='StartedBy')
    StartedOn: Optional[Date] = None
    State: Optional[JobRunState] = None
    ValidationConfigurations: Optional[ValidationConfigurationList] = None


class DescribeRulesetResponse(BaseModel):
    CreateDate: Optional[Date] = None
    CreatedBy_1: Optional[CreatedBy] = Field(None, alias='CreatedBy')
    Description: Optional[RulesetDescription] = None
    LastModifiedBy_1: Optional[LastModifiedBy] = Field(None, alias='LastModifiedBy')
    LastModifiedDate: Optional[Date] = None
    Name: RulesetName
    ResourceArn: Optional[Arn] = None
    Rules: Optional[RuleList] = None
    Tags: Optional[TagMap] = None
    TargetArn: Optional[Arn] = None


class Job(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    CreateDate: Optional[Date] = None
    CreatedBy_1: Optional[CreatedBy] = Field(None, alias='CreatedBy')
    DataCatalogOutputs: Optional[DataCatalogOutputList] = None
    DatabaseOutputs: Optional[DatabaseOutputList] = None
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    EncryptionKeyArn_1: Optional[EncryptionKeyArn] = Field(
        None, alias='EncryptionKeyArn'
    )
    EncryptionMode_1: Optional[EncryptionMode] = Field(None, alias='EncryptionMode')
    JobSample_1: Optional[JobSample] = Field(None, alias='JobSample')
    LastModifiedBy_1: Optional[LastModifiedBy] = Field(None, alias='LastModifiedBy')
    LastModifiedDate: Optional[Date] = None
    LogSubscription_1: Optional[LogSubscription] = Field(None, alias='LogSubscription')
    MaxCapacity_1: Optional[MaxCapacity] = Field(None, alias='MaxCapacity')
    MaxRetries_1: Optional[MaxRetries] = Field(None, alias='MaxRetries')
    Name: JobName
    Outputs: Optional[OutputList] = None
    ProjectName_1: Optional[ProjectName] = Field(None, alias='ProjectName')
    RecipeReference_1: Optional[RecipeReference] = Field(None, alias='RecipeReference')
    ResourceArn: Optional[Arn] = None
    RoleArn: Optional[Arn] = None
    Tags: Optional[TagMap] = None
    Timeout_1: Optional[Timeout] = Field(None, alias='Timeout')
    Type: Optional[JobType] = None
    ValidationConfigurations: Optional[ValidationConfigurationList] = None


class JobList(RootModel[List[Job]]):
    root: List[Job]


class JobRun(BaseModel):
    Attempt_1: Optional[Attempt] = Field(None, alias='Attempt')
    CompletedOn: Optional[Date] = None
    DataCatalogOutputs: Optional[DataCatalogOutputList] = None
    DatabaseOutputs: Optional[DatabaseOutputList] = None
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    ErrorMessage: Optional[JobRunErrorMessage] = None
    ExecutionTime_1: Optional[ExecutionTime] = Field(None, alias='ExecutionTime')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobSample_1: Optional[JobSample] = Field(None, alias='JobSample')
    LogGroupName_1: Optional[LogGroupName] = Field(None, alias='LogGroupName')
    LogSubscription_1: Optional[LogSubscription] = Field(None, alias='LogSubscription')
    Outputs: Optional[OutputList] = None
    RecipeReference_1: Optional[RecipeReference] = Field(None, alias='RecipeReference')
    RunId: Optional[JobRunId] = None
    StartedBy_1: Optional[StartedBy] = Field(None, alias='StartedBy')
    StartedOn: Optional[Date] = None
    State: Optional[JobRunState] = None
    ValidationConfigurations: Optional[ValidationConfigurationList] = None


class JobRunList(RootModel[List[JobRun]]):
    root: List[JobRun]


class ListJobRunsResponse(BaseModel):
    JobRuns: JobRunList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListJobsResponse(BaseModel):
    Jobs: JobList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListProjectsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Projects: ProjectList


class ListRecipeVersionsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Recipes: RecipeList


class ListRecipesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Recipes: RecipeList


class ListRulesetsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Rulesets: RulesetItemList


class ListSchedulesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Schedules: ScheduleList


class UpdateDatasetRequest(BaseModel):
    Format: Optional[InputFormat] = None
    FormatOptions_1: Optional[FormatOptions] = Field(None, alias='FormatOptions')
    Input_1: Input = Field(..., alias='Input')
    PathOptions_1: Optional[PathOptions] = Field(None, alias='PathOptions')


class CreateDatasetRequest(BaseModel):
    Format: Optional[InputFormat] = None
    FormatOptions_1: Optional[FormatOptions] = Field(None, alias='FormatOptions')
    Input_1: Input = Field(..., alias='Input')
    Name: DatasetName
    PathOptions_1: Optional[PathOptions] = Field(None, alias='PathOptions')
    Tags: Optional[TagMap] = None


class Dataset(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    CreateDate: Optional[Date] = None
    CreatedBy_1: Optional[CreatedBy] = Field(None, alias='CreatedBy')
    Format: Optional[InputFormat] = None
    FormatOptions_1: Optional[FormatOptions] = Field(None, alias='FormatOptions')
    Input_1: Input = Field(..., alias='Input')
    LastModifiedBy_1: Optional[LastModifiedBy] = Field(None, alias='LastModifiedBy')
    LastModifiedDate: Optional[Date] = None
    Name: DatasetName
    PathOptions_1: Optional[PathOptions] = Field(None, alias='PathOptions')
    ResourceArn: Optional[Arn] = None
    Source_1: Optional[Source] = Field(None, alias='Source')
    Tags: Optional[TagMap] = None


class DatasetList(RootModel[List[Dataset]]):
    root: List[Dataset]


class DescribeDatasetResponse(BaseModel):
    CreateDate: Optional[Date] = None
    CreatedBy_1: Optional[CreatedBy] = Field(None, alias='CreatedBy')
    Format: Optional[InputFormat] = None
    FormatOptions_1: Optional[FormatOptions] = Field(None, alias='FormatOptions')
    Input_1: Input = Field(..., alias='Input')
    LastModifiedBy_1: Optional[LastModifiedBy] = Field(None, alias='LastModifiedBy')
    LastModifiedDate: Optional[Date] = None
    Name: DatasetName
    PathOptions_1: Optional[PathOptions] = Field(None, alias='PathOptions')
    ResourceArn: Optional[Arn] = None
    Source_1: Optional[Source] = Field(None, alias='Source')
    Tags: Optional[TagMap] = None


class ListDatasetsResponse(BaseModel):
    Datasets: DatasetList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
